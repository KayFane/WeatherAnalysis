ls
ls()
path.stores.info <- sprintf("/Users/KayE/Documents/R/CT/%s/weather project - store.tab", province)
library(plyr)
province <- "BC"
#province <- "AB_BC"
path.stores.info <- sprintf("/Users/KayE/Documents/R/CT/%s/weather project - store.tab", province)
path.stores.sale <- sprintf("/Users/KayE/Documents/R/CT/%s/weather project - sales.tab", province)
path.weather <- sprintf("/Users/KayE/Documents/R/CT/%s/weather project - daily weather.tab", province)
stores.info <- read.table(path.stores.info, sep="\t", header=TRUE)
head(stores.info)
categories.sales <- read.table("/Users/KayE/Documents/R/CT/results/categories_sales.txt",header=TRUE)
categories.sales$TRANSACTION_DATE <- as.Date(categories.sales$TRANSACTION_DATE)
head(categories.sales)
sample <- categories.sales[categories.sales$TRANSACTION_DATE < as.Date('2012-02-29',"%Y-%m-%d"),]
source('~/Documents/R/WeatherAnalysis/R/transform_center_scale_caret.R')
predictors = data.frame(x1 = sample$BATTERIES_QTY,
x2 = sample$HEATING_COOLING_QTY)
p1 = ggplot(predictors) + geom_point(aes(x = x1, y = x2))
temp <- melt(predictors, measured = c("x1", "x2"))
p2 = ggplot(temp) + geom_histogram(aes(x=value)) +
facet_grid(. ~ variable, scales = "free_x")
grid.arrange(p1, p2)
require(caret)
trans <- preProcess(predictors, c("BoxCox", "center", "scale"))
predictors_trans <- data.frame(trans = predict(trans, predictors))
p1 = ggplot(predictors_trans) + geom_point(aes(x = trans.x1, y = trans.x2))
temp <- melt(predictors_trans, measured = c("trans.x1", "trans.x2"))
p2 = ggplot(temp) + geom_histogram(aes(x=value), data = temp) +
facet_grid(. ~ variable, scales = "free_x")
grid.arrange(p1, p2)
p1 = ggplot(predictors) + geom_point(aes(x = x1, y = x2))
p1 = ggplot(predictors_trans) + geom_point(aes(x = trans.x1, y = trans.x2))
temp <- melt(predictors_trans, measured = c("trans.x1", "trans.x2"))
p2 = ggplot(temp) + geom_histogram(aes(x=value), data = temp) +
facet_grid(. ~ variable, scales = "free_x")
grid.arrange(p1, p2)
predictors = data.frame(x1 = sample$BATTERIES_QTY,
x2 = sample$HEATING_COOLING_QTY)
p1 = ggplot(predictors) + geom_point(aes(x = x1, y = x2))
temp <- melt(predictors, measured = c("x1", "x2"))
p2 = ggplot(temp) + geom_histogram(aes(x=value)) +
facet_grid(. ~ variable, scales = "free_x")
grid.arrange(p1, p2)
library(caret)
trans <- preProcess(predictors, c("BoxCox", "center", "scale"))
predictors_trans <- data.frame(trans = predict(trans, predictors))
p1 = ggplot(predictors_trans) + geom_point(aes(x = trans.x1, y = trans.x2))
temp <- melt(predictors_trans, measured = c("trans.x1", "trans.x2"))
p2 = ggplot(temp) + geom_histogram(aes(x=value), data = temp) +
facet_grid(. ~ variable, scales = "free_x")
grid.arrange(p1, p2)
categories.sales <- read.table("/Users/KayE/Documents/R/CT/results/categories_sales.txt",header=TRUE)
categories.sales$TRANSACTION_DATE <- as.Date(categories.sales$TRANSACTION_DATE)
sample <- categories.sales[categories.sales$TRANSACTION_DATE < as.Date('2012-02-29',"%Y-%m-%d"),]
hist(sample$BATTERIES_QTY)
hist(categories.sales$BATTERIES_QTY)
length(unique(categories.sales$STORE_NUM)
)
pdf("test.pdf")
hist(categories.sales$BATTERIES_QTY)
dev.off
dev.off()
pdf("test.pdf")
apply(categories.sales,2,hist)
dev.off()
pdf("test.pdf")
dev.off()
head(categories.sales)
categories.sales <- categories.sales[, -5]
head( categories.sales)
categories.sales <- read.table("/Users/KayE/Documents/R/CT/results/categories_sales.txt",header=TRUE)
categories.sales$TRANSACTION_DATE <- as.Date(categories.sales$TRANSACTION_DATE)
categories.sales <- categories.sales[, -5]
str(categories.sales)
sales.with.weather <- StoresSalesWithWeather()
source('~/Documents/R/WeatherAnalysis/R/prepare_data.R')
sales.with.weather <- StoresSalesWithWeather()
warnings()
head(sales.with.weather)
length(which(is.na(sales.with.weather)))
is.na(sales.with.weather)
which(is.na(sales.with.weather))
head(sales.with.weather[which(is.na(sales.with.weather)),])
length(which(is.na(sales.with.weather)))
sales.with.weather <- sales.with.weather[-which(is.na(sales.with.weather)), ]
head(sales.with.weather)
categories.sales <- CategorizedSales()
head(categories.sales)
catesales <- CategorizedSales()
catesales <- CategorizedSales()
source('~/Documents/R/WeatherAnalysis/R/prepare_data.R')
catesales <- CategorizedSales()
head(catesales)
WriteTable <- function(data) {
path <- "/Users/KayE/Documents/R/CT/results/categories_sales_BC.txt"
write.table(data, path, sep="\t", row.names=FALSE,append = FALSE)
}
WriteTable(catesales)
categories.sales
head(categories.sales)
source('~/Documents/R/WeatherAnalysis/R/load_data.R')
sales <- read.table("/Users/KayE/Documents/R/CT/results/categories_sales_BC.txt",header=TRUE)
sales$TRANSACTION_DATE <- as.Date(sales$TRANSACTION_DATE)
head(sales)
summary(sales)
source('~/Documents/R/WeatherAnalysis/utilities.R')
WriteTable(sales[c(1:100),], "test")
source('~/Documents/R/WeatherAnalysis/R/Main.R')
WriteTable(sales[c(1:100),], "test")
file.exists(kPath)
file.exists("~/Document")
file.exists("~/Documents")
source('~/Documents/R/WeatherAnalysis/utilities.R')
CreatePath
CreatePath()
WriteTable(sales[c(1:100),], "test")
test <- ReadTable("test")
head(test)
source('~/Documents/R/WeatherAnalysis/R/Main.R')
sourceDir(./R)
sourceDir("./")
sourceDir("./R")
source('~/Documents/R/WeatherAnalysis/utilities.R')
SourceDir(./utilities)
SourceDir("uti")
SourceDir("ti")
SourceDir("eeee")
SourceDir(".")
sales <- ReadTable("categories_sales_BC.txt")
sales <- ReadTable("categories_sales_BC.txt")
SourceDir("./R")
pwd()
wd()
cwd()
pwd()
SourceDir("R")
SourceDir(".")
source("R/utilities.R")
source("R/load_data.R")
head(sales)
source('~/.active-rstudio-document', echo=TRUE)
<<>>=
summary(sales)
globalenv()
environment()
get(sales)
get("sales")
source('~/Documents/R/WeatherAnalysis/R/Main.R', echo=TRUE)
attach(sales)
environment()
attach(sales)
environment()
data(sales)
str(cars)
str(sales)
library(knitr); knit('testt.Rmd')
rmarkdown::render("testt.Rmd")
rmarkdown::render("testt.Rmd")
rmarkdown::render("t.Rmd","R")
rmarkdown::render("t.Rmd",output_dir="R")
rmarkdown::render("t.Rmd",output_dir=kPath)
source('~/Documents/R/WeatherAnalysis/R/utilities.R', echo=TRUE)
RenderPDF("t.Rmd")
RenderPDF("description_report.Rmd")
RenderPDF("R/description_report.Rmd")
source('~/Documents/R/WeatherAnalysis/R/Main.R', echo=TRUE)
RenderPDF("description_report.Rmd")
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
library(knitr)
RenderPDF("R/description_report.Rmd")
install.packages('pander')
library(pandoc)
pandoc.table(sales[1:2, ], style = "rmarkdown")
library(pander)
pandoc.table(sales[1:2, ], style = "rmarkdown")
pandoc.table(sales[1:2, ])
pandoc.table(sales[1:4,])
head(sales)
pandoc.table(sales)
pandoc.table(head(sales))
sample <- sales[1:5, ]
pandoc.table(sample)
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
pandoc.table.return(sample)
install.packages("Rcpp")
install.packages("Rcpp")
pandoc.table.return(sample)
pandoc.table(sample)
install.packages("Pander")
install.packages("pander")
pandoc.table(sample)
library(pander)
pandoc.table(sample)
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
str(sales)
hist(sales$max_temp_amt)
RenderPDF("R/description_report.Rmd")
str(sales)
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
str(sales)
apply(sales[, c(4,5,6,7)],2,skewness)
library(e1071)
library(e1071)
apply(sales[, c(4,5,6,7)],2,skewness)
sales[, c(4,5,6,7)]
skewness(sales$max_temp_amt)
str(sales)
1:3
c(1:3)
apply(sales[, c(10:18)],2,skewness)
apply(sales[, c(10:17)],2,skewness)
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
RenderPDF("R/description_report.Rmd")
knnFit <- train(Species ~ ., data = iris, method = "knn",
trControl = trainControl(method = "cv"))
library(caret)
knnFit <- train(Species ~ ., data = iris, method = "knn",
trControl = trainControl(method = "cv"))
predict(knnFit)
knnFit
head(iris)
extractPrediction(knnFit, testX = iris[1:10, -5])
knnFit <- train(Species ~ ., data = iris, method = "knn",
trControl = trainControl(method = "cv"))
rdaFit <- train(Species ~ ., data = iris, method = "rda",
trControl = trainControl(method = "cv"))
predict(knnFit)
predict(knnFit, type = "prob")
bothModels <- list(knn = knnFit,
tree = rdaFit)
predict(bothModels)
extractPrediction(bothModels, testX = iris[1:10, -5])
extractProb(bothModels, testX = iris[1:10, -5])
library(caret)
set.seed(998)
inTraining <- createDataPartition(Sonar$Class, p = .75, list = FALSE)
training <- Sonar[ inTraining,]
testing  <- Sonar[-inTraining,]
head(iris)
inTraining <- createDataPartition(iris$Class, p = .75, list = FALSE)
set.seed(1)R> inTrain <- createDataPartition(mutagen, p = 3/4, list = FALSE)R>    R> trainDescr <- descr[inTrain,]R> testDescr  <- descr[-inTrain,]R> trainClass <- mutagen[inTrain]R> testClass  <- mutagen[-inTrain]R>    R> prop.table(table(mutagen))
set.seed(1)
source('~/Documents/R/AppliedPredictiveModeling/inst/chapters/02_A_Short_Tour.R', echo=TRUE)
source('~/Documents/R/WeatherAnalysis/R/02_A_Short_Tour.R', echo=TRUE)
data(FuelEconomy)
## Format data for plotting against engine displacement
## Sort by engine displacement
library(AppliedPredictiveModeling)
data(FuelEconomy)
## Sort by engine displacement
cars2010 <- cars2010[order(cars2010$EngDispl),]
cars2011 <- cars2011[order(cars2011$EngDispl),]
## Combine data into one data frame
cars2010a <- cars2010
cars2010a$Year <- "2010 Model Year"
cars2011a <- cars2011
cars2011a$Year <- "2011 Model Year"
plotData <- rbind(cars2010a, cars2011a)
head(plotData)
head(cars2010)
plotData <- rbind(cars2010a, cars2011a)
library(lattice)
xyplot(FE ~ EngDispl|Year, plotData,
xlab = "Engine Displacement",
ylab = "Fuel Efficiency (MPG)",
between = list(x = 1.2))
## Fit a single linear model and conduct 10-fold CV to estimate the error
library(caret)
set.seed(1)
lm1Fit <- train(FE ~ EngDispl,
data = cars2010,
method = "lm",
trControl = trainControl(method= "cv"))
lm1Fit
## Fit a quadratic model too
## Create squared terms
cars2010$ED2 <- cars2010$EngDispl^2
cars2011$ED2 <- cars2011$EngDispl^2
set.seed(1)
lm2Fit <- train(FE ~ EngDispl + ED2,
data = cars2010,
method = "lm",
trControl = trainControl(method= "cv"))
lm2Fit
## Finally a MARS model (via the earth package)
library(earth)
set.seed(1)
marsFit <- train(FE ~ EngDispl,
data = cars2010,
method = "earth",
tuneLength = 15,
trControl = trainControl(method= "cv"))
marsFit
plot(marsFit)
## Predict the test set data
cars2011$lm1  <- predict(lm1Fit,  cars2011)
cars2011$lm2  <- predict(lm2Fit,  cars2011)
cars2011$mars <- predict(marsFit, cars2011)
## Get test set performance values via caret's postResample function
postResample(pred = cars2011$lm1,  obs = cars2011$FE)
postResample(pred = cars2011$lm2,  obs = cars2011$FE)
postResample(pred = cars2011$mars, obs = cars2011$FE)
################################################################################
### Session Information
sessionInfo()
head(cars2011)
source('~/Documents/R/WeatherAnalysis/R/02_A_Short_Tour.R', echo=TRUE)
head(cars2011)
postResample(pred = cars2011$lm1,  obs = cars2011$FE)
source('~/Documents/R/WeatherAnalysis/R/02_A_Short_Tour.R', echo=TRUE)
source('~/Documents/R/WeatherAnalysis/R/02_A_Short_Tour.R', echo=TRUE)
cars2011
head(cars2011)
source('~/Documents/R/WeatherAnalysis/R/Main.R', echo=TRUE)
head(sales)
sales2012 <- sales[sales$TRANSACTION_DATE < as.Date('2012-12-30')]
sales2012 <- sales[sales$TRANSACTION_DATE < as.Date('2012-12-30'),]
summary(sales2012$TRANSACTION_DATE)
sales2012
sales2012 <- sales[sales$TRANSACTION_DATE < as.Date('2012-12-30'),]
nrow(sales2012)
nrow(sales)
sales2012 <- sales[sales$TRANSACTION_DATE < as.Date('2012-12-30',"%Y-%m-%d"),]
nrow(sales2012)
summary(sales$TRANSACTION_DATE)
table(sales$TRANSACTION_DATE)
RenderPDF("R\data_notes_report.Rmd")
RenderPDF("R/data_notes_report.Rmd")
